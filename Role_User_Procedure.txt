************************************************** USING MSSQL FOR DATABASE ****************************************************

CREATE TABLE UserInfo(
	UserId	            uniqueidentifier not null,
	UserName	    varchar(200),
	EMail	            varchar(200),
	UserName	    varchar(200),
	Password	    varbinary(8000),
	Isactive	    bit,
	CreatedOn	    date
);
CREATE TABLE UserRole(
	RoleId	            uniqueidentifier not null,
	RoleName	    varchar(200),
	CreatedOn	    date,
	CreatedBy	    varchar(100),
);
CREATE TABLE InfoRole(
	UserId 	    uniqueidentifier,
	RoleId	            uniqueidentifier,
	Info_Role_ID		uniqueidentifier
);





############################# LOGIN FORM KO BACKCODE ##########################################################

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.SqlClient;

namespace WindowsFormsApplication1
{
    public partial class Login : Form
    {
        public Login()
        {
            InitializeComponent();
        }                                         //dataSourse=Database enginename,Catalog=databasename/                                      
        SqlConnection conn = new SqlConnection(@"Data Source=XXXXXXX ; Initial Catalog=Salesrep;Integrated Security=True;");
        private void btnLogin_Click(object sender, EventArgs e)
        {
            SqlCommand sqlcmd = new SqlCommand("Store Procedure",conn);

            sqlcmd.CommandType = CommandType.StoredProcedure;

            sqlcmd.Parameters.AddWithValue("@userName", txtUsername.Text);
            sqlcmd.Parameters.AddWithValue("@password", txtPassword.Text);
            
            sqlcmd.Parameters.Add("@Status", SqlDbType.VarChar, 200);
            sqlcmd.Parameters["@Status"].Direction = ParameterDirection.Output;

            conn.Open();

            var res = sqlcmd.ExecuteNonQuery();
            String status = sqlcmd.Parameters["@Status"].Value.ToString();

            if (status == "Sucess")
            {
                lblMessage.Text = status;
                this.Close();
                //open main page here//
            }
            else
            {
                lblMessage.Text = status;
            }
            
            conn.Close();
        }

        private void btnCancle_Click(object sender, EventArgs e)
        {
            this.Close();
        }
    }
}

################################################# Store Procedure ##########################################################
		
||||||||||||||||||||||||||||||||||||||||||||->For Product Table Procedure:||||||||||||||||||||||||||||||||||||||||||||||||

---------------------------->INSERT->(execute dbo.productinsert '" + txtProductName.Text + "','" + comSize.Text + "','" + txtBrand.Text + "','"
 	+ comUOM.Text + "','" + txtMinStok.Text + "','" + txtSalesPrice.Text + "')

CREATE PROCEDURE productinsert
@productname varchar(100),@size varchar(50),@brand varchar(90),@uom varchar(50),@minstock int, @salesprice int
AS BEGIN 
Insert Into Product Values(NEWID(),@productname,@size,@brand,@uom,@minstock,@salesprice );
End

-------------------------->UPDATE->(execute dbo.productupdate '"+txtProductName.Text+"','"+comSize.Text+"','"+txtBrand.Text+"','"+comUOM.Text+"','"+
	txtMinStok.Text+"','"+txtSalesPrice.Text+"','"+txtProductid.Text+"')

CREATE PROCEDURE productupdate			//create procedure and declare variable
@productname varchar(100),@size varchar(50),@brand varchar(90),@uom varchar(50),@minstock int, @salesprice int,@productid uniqueidentifier
AS BEGIN						//update data
UPDATE Product SET Product_Name=@productname, Size=@size, Brand=@brand,UOM=@uom,MinStockLevel=@minstock,Sales_Price=@salesprice where Product_Id=@productid
END

------------------------>DELETE->(execute dbo.productdelete '" + txtProductid.Text + "')

CREATE PROCEDURE productdelete
@productid uniqueidentifier
AS BEGIN
DELETE FROM Product WHERE Product_Id=@productid;
END



#################################################### Function#################################################################
->It is same as store procedure :

CREATE FUNCTION GetProductName(@productid int)  --it takes input value of productid &return productname
returns varchar(200)

AS BEGIN 
Declare @productName varchar(200)
SELECT @productName=Product_Name FROM Product WHERE Product_Id=@productid

return @productName
END



